<!DOCTYPE html>
<html>

<head>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <title>FCC: Drum Machine</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/17.0.2/umd/react.production.min.js"
        integrity="sha512-qlzIeUtTg7eBpmEaS12NZgxz52YYZVF5myj89mjJEesBd/oE9UPsYOX2QAXzvOAZYEvQohKdcY8zKE02ifXDmA=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/17.0.2/umd/react-dom.production.min.js"
        integrity="sha512-9jGNr5Piwe8nzLLYTk8QrEMPfjGU0px80GYzKZUxi7lmCfrBjtyCc1V5kkS5vxVwwIB7Qpzc7UxLiQxfAN30dw=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>

<body>
    <style>
        html,
        body {
            background-color: bisque;
            height: 100%;
            width: 100%;
            margin: 0;
            padding: 0;
            display: table;
            font-family: monospace;
        }

        #drum-machine {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        #display {
            background-color: goldenrod;
            width: 70%;
            height: 40%;
            border: 0.1em solid grey;
            padding: 0.1em;
        }

        #logo {
            padding-right: 0.5em;
            display: flex;
            justify-content: space-between;
            flex-direction: row;
        }

        h2 {
            font-style: oblique;
            text-align: right;
            display: inline-block;
            margin-top: 0.2em;
        }

        .fa-free-code-camp {
            font-style: italic;
        }

        .DrumControlGrid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
        }

        .PowerButton {}

        .toggle-container {
            height: 2em;
            width: 4em;
            background-color: black;
        }

        .switch-toggle {
            background-color: blue;
            height: 100%;
            width: 2em;
        }
    </style>
    <div id="drum-machine">
        <div id="display">
            <div id="root"></div>
        </div>
    </div>
    <script type="text/javascript">

        console.log(ReactDOM);
        const e = React.createElement;

        const Volume = ({ disabled, volume, onVolumeChange }) => {
            const onInputChange = (event) => {
                console.log(event);
                if (!disabled) {
                    onVolumeChange(event.target.value);
                }
            }
            return [
                e('input', { type: 'range', min: 0, max: 100, defaultValue: volume, onInput: onInputChange, disabled }),
                e('span', null, `${volume}`)
            ];
        }

        const Switch = ({ state, disabled, onClick, title }) => {
            const switchStyle = state === 'on' ? { style: { float: 'right' } } : { style: { float: 'left' } };
            return e('div', { className: 'switch-container' }, [
                e('span', null, title)
                , e('div', { onClick, className: 'toggle-container' }, e('div', { className: 'switch-toggle', ...switchStyle }))
            ])
        };

        const LastAction = ({ actionDesc }) => {
            return e('div', { className: 'last-action-container' }, actionDesc);
        };

        const DrumButton = ({ audioSrc, disabled, volume, keyboardKey, setLastAction }) => {
            const audioEl = React.useRef();
            const keyID = keyboardKey.slice(-1);
            const audioDesc = audioSrc.slice(audioSrc.lastIndexOf("/") + 1, audioSrc.lastIndexOf("."));
            const onButtonClick = () => {
                audioEl.current.play();
                setLastAction(`${audioDesc}`);
            }
            React.useEffect(() => {
                const listener = (event) => {
                    console.log(event);
                    if (event.code === keyboardKey) {
                        onButtonClick();
                    }
                };
                document.addEventListener('keydown', listener);
                return () => document.removeEventListener('keydown', listener);
            }, [audioEl, keyboardKey]);
            React.useEffect(() => {
                audioEl.current.volume = volume / 100;
            }, [audioEl, volume]);
            return [
                e('button', { onClick: onButtonClick, disabled, className: 'drum-pad', id: keyID },
                    [keyID, e('audio', { ref: audioEl, controls: false, audioDesc: audioDesc, id: keyID, className: 'clip', src: audioSrc })])
            ]
        }

        const trackList1 = [
            { keyboardKey: 'KeyQ', audioSrc: "https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3" },
            { keyboardKey: 'KeyW', audioSrc: "https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3" },
            { keyboardKey: 'KeyE', audioSrc: "https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3" },
            { keyboardKey: 'KeyA', audioSrc: "https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3" },
            { keyboardKey: 'KeyS', audioSrc: "https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3" },
            { keyboardKey: 'KeyD', audioSrc: "https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3" },
            { keyboardKey: 'KeyZ', audioSrc: "https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3" },
            { keyboardKey: 'KeyX', audioSrc: "https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3" },
            { keyboardKey: 'KeyC', audioSrc: "https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3" }
        ];

        const trackList2 = [
            { keyboardKey: 'KeyQ', audioSrc: "https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3" },
            { keyboardKey: 'KeyW', audioSrc: "https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3" },
            { keyboardKey: 'KeyE', audioSrc: "https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3" },
            { keyboardKey: 'KeyA', audioSrc: "https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3" },
            { keyboardKey: 'KeyS', audioSrc: "https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3" },
            { keyboardKey: 'KeyD', audioSrc: "https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3" },
            { keyboardKey: 'KeyZ', audioSrc: "https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3" },
            { keyboardKey: 'KeyX', audioSrc: "https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3" },
            { keyboardKey: 'KeyC', audioSrc: "https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3" }
        ];

        const DrumControlGrid = ({ disabled, volume, trackList, setLastAction }) => {
            return e('div', { className: 'DrumControlGrid' },
                trackList.map(({ keyboardKey, audioSrc }) => {
                    return e(DrumButton, { disabled, volume, keyboardKey, audioSrc, setLastAction })
                }));
        };

        const DrumMachine = ({ }) => {

            const [power, setPower] = React.useState('on');
            const [trackList, setTrackList] = React.useState(trackList1);
            const [volume, setVolume] = React.useState(50);
            const disabled = power === 'off';
            const [lastAction, setLastAction] = React.useState('');

            const onPowerClick = () => {
                setPower(power === 'on' ? 'off' : 'on');
                setLastAction(power === 'on' ? 'Power: off' : 'Power: on');
            }

            const onVolumeChange = (volume) => {
                setVolume(volume);
                setLastAction(`Volume: ${volume}`);
            }

            const onTracklistChange = () => {
                const trackListName = trackList === trackList1 ? '2' : '1';
                setTrackList(trackList === trackList1 ? trackList2 : trackList1);
                setLastAction(`Tracklist: ${trackListName}`);
            }

            React.useEffect(() => {
                let timerId = null;
                if (lastAction.startsWith('Vol')) {
                    timerId = setTimeout(() => setLastAction(''), 2000);
                }
                return () => timerId ? clearTimeout(timerId) : undefined;
            }, [lastAction]);

            return e('div', null, [
                e('div', { id: 'logo' }, [
                    e(Switch, { state: power, disabled, onClick: onPowerClick, title: 'Power' }),
                    e('h2', null, ['FCC ', e('i', { className: 'fa fa-free-code-camp' })])]),
                e('button', { onClick: onTracklistChange, disabled }, 'Tracklist'),
                e('span', null, `${power}`),
                e(Volume, { disabled, volume, onVolumeChange }),
                e(DrumControlGrid, { disabled, volume, trackList, setLastAction }),
                e(LastAction, { actionDesc: lastAction })
            ])
        };

        const root = document.getElementById('root');
        ReactDOM.render(e(DrumMachine, { width: 10, height: 12 }, null), root);

    </script>
</body>

</html>